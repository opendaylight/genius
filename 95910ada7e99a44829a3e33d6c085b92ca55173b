{
  "comments": [
    {
      "key": {
        "uuid": "da01753e_a3cbfba3",
        "filename": "lockmanager/lockmanager-impl/src/main/java/org/opendaylight/lockmanager/LockManager.java",
        "patchSetId": 12
      },
      "lineNbr": 150,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-04-19T15:21:10Z",
      "side": 1,
      "message": "I\u0027m not completely following what you\u0027re doing here yet, but if you replace the \"busy spin\" Thread.sleep loop with this Future.get idea (this works?) then can\u0027t you completely remove the retry?  Perhaps I\u0027m not getting what it\u0027s looping for..",
      "revId": "95910ada7e99a44829a3e33d6c085b92ca55173b",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_43168fa8",
        "filename": "lockmanager/lockmanager-impl/src/main/java/org/opendaylight/lockmanager/LockManager.java",
        "patchSetId": 12
      },
      "lineNbr": 150,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-19T16:33:52Z",
      "side": 1,
      "message": "we need this retry when multiple threads are waiting to acquired a lock. When one thread already holds a lock, then remaining threads are blocked at future.get(), upon release of the lock only on thread would get chance to get the lock and remaining threads goes to retry again.\n\n(this works?): From the code wise, changes look okay because it can work across cluster since LockListener is made as clustered DTCN listener to make future complete upon lock removal(release). \nLet us also do some tests/csit runs to confirm it.",
      "parentUuid": "da01753e_a3cbfba3",
      "revId": "95910ada7e99a44829a3e33d6c085b92ca55173b",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_802a2d2a",
        "filename": "lockmanager/lockmanager-impl/src/test/java/org/opendaylight/lockmanager/tests/LockManagerTest.java",
        "patchSetId": 12
      },
      "lineNbr": 51,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-04-19T13:43:12Z",
      "side": 1,
      "message": "@Inject LockManagerService lockManager;",
      "revId": "95910ada7e99a44829a3e33d6c085b92ca55173b",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_c0f435d1",
        "filename": "lockmanager/lockmanager-impl/src/test/java/org/opendaylight/lockmanager/tests/LockManagerTest.java",
        "patchSetId": 12
      },
      "lineNbr": 57,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-04-19T13:43:12Z",
      "side": 1,
      "message": "remove this, this is wrong - you have to let Guice control the object creation by dependency injection, not do it yourself",
      "revId": "95910ada7e99a44829a3e33d6c085b92ca55173b",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_200421bf",
        "filename": "lockmanager/lockmanager-impl/src/test/java/org/opendaylight/lockmanager/tests/LockManagerTestModule.java",
        "patchSetId": 12
      },
      "lineNbr": 23,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-04-19T13:43:12Z",
      "side": 1,
      "message": "bind(LockManagerService.class).to(LockManager.class);",
      "revId": "95910ada7e99a44829a3e33d6c085b92ca55173b",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}