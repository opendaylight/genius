{
  "comments": [
    {
      "key": {
        "uuid": "d608f946_d441a837",
        "filename": "idmanager/idmanager-impl/src/main/java/org/opendaylight/genius/idmanager/jobs/CleanUpJob.java",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 7615
      },
      "writtenOn": "2018-11-29T07:28:39Z",
      "side": 1,
      "message": "shouldn\u0027t this be .get()? I think this should be .get() as this will make sure lock is not released until the data is written to the data store, and other thread waiting for the same lock object will see the updated data.",
      "range": {
        "startLine": 99,
        "startChar": 14,
        "endLine": 99,
        "endChar": 19
      },
      "revId": "a4d6dff442a38464d7b628e2ac99959dc1bc6972",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be04e0dc_e1d0eb9f",
        "filename": "idmanager/idmanager-impl/src/main/java/org/opendaylight/genius/idmanager/jobs/CleanUpJob.java",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 4540
      },
      "writtenOn": "2018-11-29T10:24:31Z",
      "side": 1,
      "message": "Either that, or the lock needs to be handled inside the transaction lambda. The future should be returned too.",
      "parentUuid": "d608f946_d441a837",
      "range": {
        "startLine": 99,
        "startChar": 14,
        "endLine": 99,
        "endChar": 19
      },
      "revId": "a4d6dff442a38464d7b628e2ac99959dc1bc6972",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2675e681_19d393c7",
        "filename": "idmanager/idmanager-impl/src/main/java/org/opendaylight/genius/idmanager/jobs/CleanUpJob.java",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-12-18T18:08:28Z",
      "side": 1,
      "message": "I finally looked into this now (sorry for the delay), so: \n\nWhile it\u0027s tempting to use get() here to replicate the original, it\u0027s important to note that this is a Job.  I believe the original idea of jobs was that this can (should) be async, and the JobCoordinator (JC) makes \"other thread waiting for the same lock object will see the updated data\", if there are other jobs for the same key.  The caller who enqueued the job anyway won\u0027t really wait for the data to be written even the way it currently is.  Therefore, instead of adding get() I\u0027ve make sure to return the future and make call() pass it back to the JC, which would log failures and, hopefully (not really verified), use this to sequence subsequent entries with the same key.\n\nAs for \" the lock needs to be handled inside the transaction lambda\", assuming this refers to the idUtils.lock in line 81 and the idUtils.unlock in line 101, I had a look, but... that opens a whole different can of worms - that LockManagerService is an RPC - that\u0027s the (old \u0026 unresolved) discussion re. how to propagate TXs accross RPCs.  My take on that is that perhaps something like LM simply does not have to be modeled as a YANG RPC, but can be a \"normal\" in-process Java service interface which we can @Reference from the OSGi Registry? Then we would add a TypedReadWriteTransaction argument to it, and be done.  However, that sounds more like something for a future follow-up change than anything to still mix in here... If anyone wants to have a go at doing something like that, I\u0027d be happy to review it! ;)",
      "parentUuid": "be04e0dc_e1d0eb9f",
      "range": {
        "startLine": 99,
        "startChar": 14,
        "endLine": 99,
        "endChar": 19
      },
      "revId": "a4d6dff442a38464d7b628e2ac99959dc1bc6972",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61651ffb_05321852",
        "filename": "idmanager/idmanager-impl/src/main/java/org/opendaylight/genius/idmanager/jobs/CleanUpJob.java",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 4540
      },
      "writtenOn": "2018-12-19T10:45:42Z",
      "side": 1,
      "message": "\u003e As for \" the lock needs to be handled inside the transaction\n \u003e lambda\", assuming this refers to the idUtils.lock in line 81 and\n \u003e the idUtils.unlock in line 101, I had a look, but... that opens a\n \u003e whole different can of worms - that LockManagerService is an RPC -\n \u003e that\u0027s the (old \u0026 unresolved) discussion re. how to propagate TXs\n \u003e accross RPCs.  My take on that is that perhaps something like LM\n \u003e simply does not have to be modeled as a YANG RPC, but can be a\n \u003e \"normal\" in-process Java service interface which we can @Reference\n \u003e from the OSGi Registry? Then we would add a TypedReadWriteTransaction\n \u003e argument to it, and be done.  However, that sounds more like\n \u003e something for a future follow-up change than anything to still mix\n \u003e in here... If anyone wants to have a go at doing something like\n \u003e that, I\u0027d be happy to review it! ;)\n\nSo we might as well remove the lock then, because itâ€™s not protecting\nanything here :-(. (At least, add a comment to that effect, otherwise\nthe current change will end up thoroughly confusing people a few\nmonths down the line.)",
      "parentUuid": "2675e681_19d393c7",
      "range": {
        "startLine": 99,
        "startChar": 14,
        "endLine": 99,
        "endChar": 19
      },
      "revId": "a4d6dff442a38464d7b628e2ac99959dc1bc6972",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fdc3304_eddcc2f2",
        "filename": "idmanager/idmanager-impl/src/main/java/org/opendaylight/genius/idmanager/jobs/CleanUpJob.java",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-12-19T14:49:55Z",
      "side": 1,
      "message": "Done, via inline, ok?",
      "parentUuid": "61651ffb_05321852",
      "range": {
        "startLine": 99,
        "startChar": 14,
        "endLine": 99,
        "endChar": 19
      },
      "revId": "a4d6dff442a38464d7b628e2ac99959dc1bc6972",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}