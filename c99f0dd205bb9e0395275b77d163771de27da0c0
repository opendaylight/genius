{
  "comments": [
    {
      "key": {
        "uuid": "d93aa629_df5f479c",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/mdsalutil/NWUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 233,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-05-24T14:34:19Z",
      "side": 1,
      "message": "\"true, if ip address is in range\" (the \u0027is\u0027 comes after)",
      "revId": "c99f0dd205bb9e0395275b77d163771de27da0c0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4b2decc_b9f155cd",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/mdsalutil/NWUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 233,
      "author": {
        "id": 7781
      },
      "writtenOn": "2018-05-25T07:35:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d93aa629_df5f479c",
      "revId": "c99f0dd205bb9e0395275b77d163771de27da0c0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef96f5b7_5b65bc04",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/mdsalutil/NWUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 245,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-05-24T14:34:19Z",
      "side": 1,
      "message": "it\u0027s a little bit untypical, in general, to have an isXYZ() function to validate data which does a LOG.error - if you expect its \"normal\" that it could be false, then it\u0027s not an error?  If it shold never happen, then perhaps it should not return false but propagate the Exception to the caller?  But if it is normal and expected, then it\u0027s bad for performance to have and catch the exception a lot of times - better if value is valid without causing an exception.",
      "revId": "c99f0dd205bb9e0395275b77d163771de27da0c0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20c78261_d3d3768f",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/mdsalutil/NWUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 245,
      "author": {
        "id": 7781
      },
      "writtenOn": "2018-05-25T07:35:14Z",
      "side": 1,
      "message": "Thanks for your comment.\nI agree with your point. Have modified the logic and return either TRUE or FALSE based on the successful match or not.\n\nThanks,\nKarthikeyan.",
      "parentUuid": "ef96f5b7_5b65bc04",
      "revId": "c99f0dd205bb9e0395275b77d163771de27da0c0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94a624aa_e4d13160",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/mdsalutil/NWUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 278,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-05-24T14:34:19Z",
      "side": 1,
      "message": "same comment as above",
      "revId": "c99f0dd205bb9e0395275b77d163771de27da0c0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0409233c_26401b91",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/mdsalutil/NWUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 278,
      "author": {
        "id": 7781
      },
      "writtenOn": "2018-05-25T07:35:14Z",
      "side": 1,
      "message": "InetAddress.getByName() method is checked exception. So, It is mandatory to have try-catch block here. But i have changed ERROR to WARN and return FALSE to the caller. Since Caller is expecting the result on either TRUE or FALSE only.",
      "parentUuid": "94a624aa_e4d13160",
      "revId": "c99f0dd205bb9e0395275b77d163771de27da0c0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "044b3635_0f1709c3",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/mdsalutil/NWUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 278,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-05-25T11:27:41Z",
      "side": 1,
      "message": "I don\u0027t know if the UnknownHostException is (a) \"normal\" and \u0027will just return fals\u0027 or (b) should never happen under regular expected circumstances?   If it\u0027s (b) then this is probably OK.  But if it\u0027s (a) this is expected to happen a lot during normal runtime, then this pattern will be bad for performance to have and catch the exception a lot of times.  If that is the case, you should perhaps find a way to somehow do what you need to here without using InetAddress.getByName() at all.\n\nAlso, and perhaps even more importantly than the catch thing: InetAddress.getByName() also has a well known problem - it causes DNS services to be accessed.  That is often not what you really expected and wanted.  Are you aware of this backstory?  Google it.  See also e.g. https://github.com/google/guava/blob/master/guava/src/com/google/common/net/InetAddresses.java",
      "parentUuid": "0409233c_26401b91",
      "revId": "c99f0dd205bb9e0395275b77d163771de27da0c0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4faf5436_a9c8c50e",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/mdsalutil/NWUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 278,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-05-25T11:52:20Z",
      "side": 1,
      "message": "For getByName, \"if a literal IP address is supplied, only the validity of the address format is checked.\". So UnknownHostException *should* never happen in this case. That said, it\u0027s worth looking into the guava class you mentioned.",
      "parentUuid": "044b3635_0f1709c3",
      "revId": "c99f0dd205bb9e0395275b77d163771de27da0c0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b89f2a8c_e4a72a83",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/mdsalutil/NWUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 278,
      "author": {
        "id": 7781
      },
      "writtenOn": "2018-05-31T09:37:02Z",
      "side": 1,
      "message": "Thanks Michael and Tom for valuable comments. Have done the changes based on your concern and verified modified approach is working fine. Request to review the changes and provide your comments if anything.\n\nThanks in Advance,\nKarthikeyan.",
      "parentUuid": "4faf5436_a9c8c50e",
      "revId": "c99f0dd205bb9e0395275b77d163771de27da0c0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "077d70ec_10096928",
        "filename": "mdsalutil/mdsalutil-api/src/test/java/org/opendaylight/genius/mdsalutil/tests/NWUtilTest.java",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-05-24T14:34:19Z",
      "side": 1,
      "message": "entire test probably easier to read if you (a) simply inline the check into of assigning it to a temproary variable you don\u0027t really need in this case and (b) import static org.opendaylight.genius.mdsalutil.NWUtil.isIpAddressInRange.  With both of those ideas combined, this then just becomes:\n\n    assertTrue(isIpAddressInRange(buildIpAddress(\"1.1.1.1\"), buildIpPrefix(\"1.1.1.0/24\")));\n\nif you use Google Truth, then you can instead write it like this, which is even a little nicer:\n\n    assertThat(isIpAddressInRange(buildIpAddress(\"1.1.1.1\"), buildIpPrefix(\"1.1.1.0/24\"))).isTrue();",
      "revId": "c99f0dd205bb9e0395275b77d163771de27da0c0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d1ebdbd_a194f165",
        "filename": "mdsalutil/mdsalutil-api/src/test/java/org/opendaylight/genius/mdsalutil/tests/NWUtilTest.java",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 7781
      },
      "writtenOn": "2018-05-25T07:35:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "077d70ec_10096928",
      "revId": "c99f0dd205bb9e0395275b77d163771de27da0c0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6337a3ba_702f870f",
        "filename": "mdsalutil/mdsalutil-api/src/test/java/org/opendaylight/genius/mdsalutil/tests/NWUtilTest.java",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-05-25T11:27:41Z",
      "side": 1,
      "message": "only inlined, not static import or using Truth - but fine ;)",
      "parentUuid": "2d1ebdbd_a194f165",
      "revId": "c99f0dd205bb9e0395275b77d163771de27da0c0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f36e840e_6f49e20a",
        "filename": "mdsalutil/mdsalutil-api/src/test/java/org/opendaylight/genius/mdsalutil/tests/NWUtilTest.java",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 7781
      },
      "writtenOn": "2018-05-31T09:37:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6337a3ba_702f870f",
      "revId": "c99f0dd205bb9e0395275b77d163771de27da0c0",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}