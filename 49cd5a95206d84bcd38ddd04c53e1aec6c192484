{
  "comments": [
    {
      "key": {
        "uuid": "1a622d24_3eb35b0b",
        "filename": "interfacemanager/interfacemanager-impl/pom.xml",
        "patchSetId": 4
      },
      "lineNbr": 102,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-01-10T16:37:26Z",
      "side": 1,
      "message": "${genius.version} instead of hard-coded 0.2.0-SNAPSHOT",
      "revId": "49cd5a95206d84bcd38ddd04c53e1aec6c192484",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a622d24_dea8678f",
        "filename": "interfacemanager/interfacemanager-impl/src/test/java/org/opendaylight/genius/interfacemanager/test/InterfaceManagerConfigurationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-01-10T16:37:26Z",
      "side": 1,
      "message": "Nope... we agreed ODL wide to have static import before non-static, and then all alphabetical.  FYI https://github.com/vorburger/opendaylight-eclipse-setup automatically pre-configures it correctly.",
      "revId": "49cd5a95206d84bcd38ddd04c53e1aec6c192484",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a622d24_c919d3d8",
        "filename": "interfacemanager/interfacemanager-impl/src/test/java/org/opendaylight/genius/interfacemanager/test/InterfaceManagerConfigurationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-01-10T16:37:26Z",
      "side": 1,
      "message": "nit picking: please put spaces between arguments? Sorry! ;)",
      "revId": "49cd5a95206d84bcd38ddd04c53e1aec6c192484",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a622d24_69287fe2",
        "filename": "interfacemanager/interfacemanager-impl/src/test/java/org/opendaylight/genius/interfacemanager/test/InterfaceManagerConfigurationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-01-10T16:37:26Z",
      "side": 1,
      "message": "I love this idea in principle, this is a step in the right direction! However, this will only solve half of our async testing issues - the DataStoreJobCoordinator and the ResourceBatchingManager remain a problem for tests (unless we do more work to make them completely Futures based as well), do you agree, or am I missing something? Also, as impl. here it won\u0027t work! You\u0027re missing the get() for the transformed Future.  Without that, the assert failure will never be processed.  Also, as-is the AssertionError appears as an ExecutionException, which is a bit confusing; CheckedFuture fixes that. FYI I\u0027ve tried this and more out on https://git.opendaylight.org/gerrit/#/c/50208/",
      "revId": "49cd5a95206d84bcd38ddd04c53e1aec6c192484",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a622d24_49014337",
        "filename": "interfacemanager/interfacemanager-impl/src/test/java/org/opendaylight/genius/interfacemanager/test/InterfaceManagerConfigurationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-01-10T16:37:26Z",
      "side": 1,
      "message": "Also another thought, just for code readability, how about \"inlining\" the AsyncFunction directly into the transform, do you know what I mean? It would probably look much shorter and be clearer to read? Like this:\n\n        Futures.transform(future, (AsyncFunction\u003cString, Void\u003e) input -\u003e {\n            Assert.fail(\"duh #1\");\n            return null;\n        }).get();",
      "revId": "49cd5a95206d84bcd38ddd04c53e1aec6c192484",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}