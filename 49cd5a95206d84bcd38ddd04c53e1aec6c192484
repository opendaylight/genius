{
  "comments": [
    {
      "key": {
        "uuid": "1a622d24_3eb35b0b",
        "filename": "interfacemanager/interfacemanager-impl/pom.xml",
        "patchSetId": 4
      },
      "lineNbr": 102,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-01-10T16:37:26Z",
      "side": 1,
      "message": "${genius.version} instead of hard-coded 0.2.0-SNAPSHOT",
      "revId": "49cd5a95206d84bcd38ddd04c53e1aec6c192484",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a622d24_dea8678f",
        "filename": "interfacemanager/interfacemanager-impl/src/test/java/org/opendaylight/genius/interfacemanager/test/InterfaceManagerConfigurationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-01-10T16:37:26Z",
      "side": 1,
      "message": "Nope... we agreed ODL wide to have static import before non-static, and then all alphabetical.  FYI https://github.com/vorburger/opendaylight-eclipse-setup automatically pre-configures it correctly.",
      "revId": "49cd5a95206d84bcd38ddd04c53e1aec6c192484",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a622d24_c919d3d8",
        "filename": "interfacemanager/interfacemanager-impl/src/test/java/org/opendaylight/genius/interfacemanager/test/InterfaceManagerConfigurationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-01-10T16:37:26Z",
      "side": 1,
      "message": "nit picking: please put spaces between arguments? Sorry! ;)",
      "revId": "49cd5a95206d84bcd38ddd04c53e1aec6c192484",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a622d24_53aefb98",
        "filename": "interfacemanager/interfacemanager-impl/src/test/java/org/opendaylight/genius/interfacemanager/test/InterfaceManagerConfigurationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 5975
      },
      "writtenOn": "2017-01-13T09:49:25Z",
      "side": 1,
      "message": "will take care of it",
      "parentUuid": "1a622d24_c919d3d8",
      "revId": "49cd5a95206d84bcd38ddd04c53e1aec6c192484",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a622d24_69287fe2",
        "filename": "interfacemanager/interfacemanager-impl/src/test/java/org/opendaylight/genius/interfacemanager/test/InterfaceManagerConfigurationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-01-10T16:37:26Z",
      "side": 1,
      "message": "I love this idea in principle, this is a step in the right direction! However, this will only solve half of our async testing issues - the DataStoreJobCoordinator and the ResourceBatchingManager remain a problem for tests (unless we do more work to make them completely Futures based as well), do you agree, or am I missing something? Also, as impl. here it won\u0027t work! You\u0027re missing the get() for the transformed Future.  Without that, the assert failure will never be processed.  Also, as-is the AssertionError appears as an ExecutionException, which is a bit confusing; CheckedFuture fixes that. FYI I\u0027ve tried this and more out on https://git.opendaylight.org/gerrit/#/c/50208/",
      "revId": "49cd5a95206d84bcd38ddd04c53e1aec6c192484",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a622d24_4a713175",
        "filename": "interfacemanager/interfacemanager-impl/src/test/java/org/opendaylight/genius/interfacemanager/test/InterfaceManagerConfigurationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-01-10T22:04:02Z",
      "side": 1,
      "message": "Actually, on thinking this through further, I doubt we really want or need to transform() here at all.. IMHO a simple checkedGet() of the returned CheckedFuture would suffice for what we\u0027re after - which is to wait for the background processing to be done.  But I\u0027ve tried that out, and with that the test actually fails - and I think that\u0027s normal (it\u0027s green for you because you\u0027re \"cheating\" by not ever calling get - the failed assertions are never invoked; as stated above).  However, I actually still think this is a good idea - but you have to leave in the Thread.sleep(), for now. We\u0027ll replace them later with that stuff I\u0027m trying to do, to wait for the DataStoreJobCoordinator and the ResourceBatchingManager.  But this is still a good idea, in fact it is needed, because with what I was doing, there could still be a concurrency problem. We\u0027ll need to combine your (this) and my approach, because: When we do any action on the DataStore, we need to wait for that action to have been processed (which you\u0027re doing here; and I forgot about, focusing only on the DataStoreJobCoordinator and the ResourceBatchingManager, but that needs to kick in AFTER having been sure it got written/deleted/whatever), and THEN (after) we need to wait for the DataStoreJobCoordinator and the ResourceBatchingManager async processing.  So for now we have to keep the Thread.sleep() - but if you can change this to use CheckedFuture.checkedGet() instead of Futures.transform(), and keep Thread.sleep(), I support it with +1 because it will still have value eventually.",
      "parentUuid": "1a622d24_69287fe2",
      "revId": "49cd5a95206d84bcd38ddd04c53e1aec6c192484",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a622d24_73a9778f",
        "filename": "interfacemanager/interfacemanager-impl/src/test/java/org/opendaylight/genius/interfacemanager/test/InterfaceManagerConfigurationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 5975
      },
      "writtenOn": "2017-01-13T09:49:25Z",
      "side": 1,
      "message": "I got your concern of not catching checked exception which is provided checkedFutures.\nhow about using   Futures.addCallback() on the success we can assert on the expected result and catch the exception thrown.When an exception is caught we can fail the test case.\nshare the code review link where you have done \nDataStoreCoordinator changes.I will have a look into it.\nMy opinion is we can remove Thread.sleep permanently using futures.If required we can have a wrapper class around CheckedFuture which suits our need.It would be an interesting problem to solve",
      "parentUuid": "1a622d24_4a713175",
      "revId": "49cd5a95206d84bcd38ddd04c53e1aec6c192484",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a622d24_49014337",
        "filename": "interfacemanager/interfacemanager-impl/src/test/java/org/opendaylight/genius/interfacemanager/test/InterfaceManagerConfigurationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-01-10T16:37:26Z",
      "side": 1,
      "message": "Also another thought, just for code readability, how about \"inlining\" the AsyncFunction directly into the transform, do you know what I mean? It would probably look much shorter and be clearer to read? Like this:\n\n        Futures.transform(future, (AsyncFunction\u003cString, Void\u003e) input -\u003e {\n            Assert.fail(\"duh #1\");\n            return null;\n        }).get();",
      "revId": "49cd5a95206d84bcd38ddd04c53e1aec6c192484",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a622d24_9393735a",
        "filename": "interfacemanager/interfacemanager-impl/src/test/java/org/opendaylight/genius/interfacemanager/test/InterfaceManagerConfigurationTest.java",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 5975
      },
      "writtenOn": "2017-01-13T09:49:25Z",
      "side": 1,
      "message": "yes .. wil convert into one liner",
      "parentUuid": "1a622d24_49014337",
      "revId": "49cd5a95206d84bcd38ddd04c53e1aec6c192484",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}