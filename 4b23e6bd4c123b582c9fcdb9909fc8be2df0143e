{
  "comments": [
    {
      "key": {
        "uuid": "ddf386f9_f914d793",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-07-30T11:37:39Z",
      "side": 1,
      "message": "that\u0027s an interesting question.  We never really formally said so far that we cannot use the data store in a @PostConstruct, but the typical pattern is @Inject DataBroker, keep it in a final field - but not actually use it just yet.  I would agree that it\u0027s probably much better if we do not.  The e.g. Spring or Guice DI documentation typically also say similar things (initial DI should be fast and not fail; so normally you don\u0027t do e.g. datbase work there).  I cannot comment on the functionality here, but if there is any way to do these datastore operations a little later than during the blueprint initialization, that\u0027s probably not a bad idea.  Not understanding this functionality, am not clear where you could move this to... a listener, perhaps?  Why does whatever this does have to happen at start up?",
      "revId": "4b23e6bd4c123b582c9fcdb9909fc8be2df0143e",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd3c8e98_e3e27d52",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 7866
      },
      "writtenOn": "2018-07-30T12:30:28Z",
      "side": 1,
      "message": "Yes, it is possible to postpone default-transport-zone creation at later point of time, when first TEP from southbound comes that is intended for default-transport-zone.",
      "parentUuid": "ddf386f9_f914d793",
      "revId": "4b23e6bd4c123b582c9fcdb9909fc8be2df0143e",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0ea53d5_14886d29",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 773
      },
      "writtenOn": "2018-07-30T13:18:27Z",
      "side": 1,
      "message": "Doesn\u0027t this move us closer to the previous autotunnel implementation where the tunnels are created as nodes come up? That was having issues since the tunnels didn\u0027t come up quick enough.",
      "parentUuid": "fd3c8e98_e3e27d52",
      "revId": "4b23e6bd4c123b582c9fcdb9909fc8be2df0143e",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad22dbb0_417505e4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 7866
      },
      "writtenOn": "2018-07-30T14:00:20Z",
      "side": 1,
      "message": "When def-TZ is not created at start-up and then default-transport-zone shall be created when very first TEP comes for it. In this case, tunnels formation will not happen for first TEP because atleast 2 TEPs are required for tunnel formation, so issue of tunnel not formed quickly, should not be of concern for first TEP addition wherein default-TZ creation will be carried out.\nBut, first TEP addition would be slow compared to subsequent TEP additions. 2nd TEP onwards, TEP addition will be done as it is done now.",
      "parentUuid": "b0ea53d5_14886d29",
      "revId": "4b23e6bd4c123b582c9fcdb9909fc8be2df0143e",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f38e81f6_3fe7096a",
        "filename": "itm/itm-impl/src/main/java/org/opendaylight/genius/itm/cli/TepCommandHelper.java",
        "patchSetId": 3
      },
      "lineNbr": 851,
      "author": {
        "id": 817
      },
      "writtenOn": "2018-07-30T18:09:36Z",
      "side": 1,
      "message": "Michael, do we really need a retrytransaction here, as we are sure that the DS write has succeeded in one node, and that is good enough? Should I just catch the exception and ignore, for this particular scenario?",
      "revId": "4b23e6bd4c123b582c9fcdb9909fc8be2df0143e",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d42824c3_c8bf8d3c",
        "filename": "itm/itm-impl/src/main/java/org/opendaylight/genius/itm/cli/TepCommandHelper.java",
        "patchSetId": 3
      },
      "lineNbr": 851,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-07-31T08:48:44Z",
      "side": 1,
      "message": "IMHO you should always use a RetryingManagedNewTransactionRunner, and never manually catch and ignore.  Just because it\u0027s too easy to do it wrong when doing it yourself - and there is no real disadvantage to using the RetryingManagedNewTransactionRunner.. at best, the commit() will succeed and it\u0027s all good.  At worst it will retry, but silently.  If it till fails after 3 atttemps, you probably do want to know about it?  --  What you can and in this particular case perhaps should do though is a ReadWriteTx and check if the data that this must write is already present, would that make sense here?",
      "parentUuid": "f38e81f6_3fe7096a",
      "revId": "4b23e6bd4c123b582c9fcdb9909fc8be2df0143e",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}