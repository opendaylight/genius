{
  "comments": [
    {
      "key": {
        "uuid": "6f51fdd2_79ce8700",
        "filename": "idmanager/idmanager-impl/src/main/java/org/opendaylight/genius/idmanager/IdManager.java",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-06-19T17:03:20Z",
      "side": 1,
      "message": "see this will create some confusion - LogicalDatastoreType.CONFIGURATION here...",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e284ba61_f7d0fba0",
        "filename": "idmanager/idmanager-impl/src/main/java/org/opendaylight/genius/idmanager/IdManager.java",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-06-19T17:03:20Z",
      "side": 1,
      "message": "... and Datastore.CONFIGURATION here.",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8dc2cf55_80521769",
        "filename": "idmanager/idmanager-impl/src/main/java/org/opendaylight/genius/idmanager/IdManager.java",
        "patchSetId": 1
      },
      "lineNbr": 208,
      "author": {
        "id": 4540
      },
      "writtenOn": "2018-06-20T07:39:58Z",
      "side": 1,
      "message": "The plan is to avoid references to LogicalDatastoreType altogether eventually ;-).",
      "parentUuid": "e284ba61_f7d0fba0",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8caf142_be1cae62",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/Datastore.java",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-06-19T17:03:20Z",
      "side": 1,
      "message": "is there a strong reason for this, VS the good ol\u0027 LogicalDatastoreType enum?  It will invariably create confusion to have two.. perhaps we can find a way to avoid this - why could those new methods on ManagedNewTransactionRunner not just accept an LogicalDatastoreType argument, instead of this Datastore?",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "524bc034_6c04194f",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/Datastore.java",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 4540
      },
      "writtenOn": "2018-06-20T07:38:57Z",
      "side": 1,
      "message": "The point of this interface is to make the transactions strongly-typed on the datastore type. We can’t extend the existing enum to provide this class-based typing, because enums are final.",
      "parentUuid": "f8caf142_be1cae62",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11a6d98c_6052c130",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/Datastore.java",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-06-20T14:19:10Z",
      "side": 1,
      "message": "oh, wait I had a closer look now... generics magic?! I didn\u0027t immediately get that; I fear people won\u0027t get this - but you are perhaps right to point out that one doesn\u0027t have to fully understand the generics magic just to be able to use this correctly - the point is the type safety this brings.  \n\nI\u0027ll play around to see if we can\u0027t achieve the same with the enum.",
      "parentUuid": "524bc034_6c04194f",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fe08e9e_3c7e1d7b",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/Datastore.java",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-06-20T15:09:18Z",
      "side": 1,
      "message": "\u003e I\u0027ll play around to see if we can\u0027t achieve the same with the enum.\n\nI\u0027ve tried this, see below, but that doesn\u0027t actually make it typesafe, so how you have it here is probably the best we can do (therefore fine with me).\n\nThis actually compiles, but that D type argument is just LogicalDatastoreType, and not LogicalDatastoreType.CONFIGURATION, so this is pointless (unless someone sees how this can be made to do what we need):\n\n  interface DatastoreWriteTransaction\u003cD extends Enum\u003cLogicalDatastoreType\u003e\u003e {\n\n    \u003cT extends DataObject\u003e void put(InstanceIdentifier\u003cT\u003e path, T data);\n\n  }\n\n  interface ManagedNewTransactionRunner {\n    @CheckReturnValue\n    \u003cD extends Enum\u003cLogicalDatastoreType\u003e, E extends Exception\u003e\n        FluentFuture\u003cVoid\u003e callWithNewWriteTransactionAndSubmit(D datastoreType,\n            CheckedConsumer\u003cDatastoreWriteTransaction\u003cD\u003e, E\u003e txRunner);\n  }\n\n  class ExampleUsage\u003cT extends DataObject\u003e {\n\n    ManagedNewTransactionRunner managedNewTransactionRunner;\n    \n    void foo() {\n        managedNewTransactionRunner.callWithNewWriteTransactionAndSubmit(LogicalDatastoreType.CONFIGURATION, tx -\u003e {\n            InstanceIdentifier\u003cT\u003e path \u003d null;\n            T data \u003d null;\n            tx.put(path, data);\n            barOK(tx); \n            barNOK(tx);\n        });\n    }\n\n    private void barOK(DatastoreWriteTransaction\u003cLogicalDatastoreType.CONFIGURATION\u003e tx) {\n    }\n\n    private void barNOK(DatastoreWriteTransaction\u003cLogicalDatastoreType.OPERATIONAL\u003e tx) {\n    }\n  }",
      "parentUuid": "11a6d98c_6052c130",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0096e7a_625ddfcf",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/DatastoreReadTransaction.java",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-06-20T14:19:10Z",
      "side": 1,
      "message": "naming apart, if I correctly understand what you are after re. generics magic here, then isn\u0027t this one wrong?  Did you mean that to be like the DatastoreWriteTransaction?",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d91b0e6_2a32e6b2",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/DatastoreReadTransaction.java",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 4540
      },
      "writtenOn": "2018-06-20T16:29:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d0096e7a_625ddfcf",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b8abfaa_6425c0ec",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/DatastoreReadTransaction.java",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-06-19T17:03:20Z",
      "side": 1,
      "message": "How about naming these new ones the Managed*Transaction instead of a Datastore*Transaction?  (Because they are for the ManagedNewTransactionRunner.)",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc2c6d62_2317d64a",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/DatastoreReadTransaction.java",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 4540
      },
      "writtenOn": "2018-06-20T07:38:57Z",
      "side": 1,
      "message": "I named them this way because they’re not *for* the ManagedNewTransactionRunner, they’re datastore-specific transactions. We could add methods to the existing DataBroker which would return these (and that’s what I plan on suggesting once this is stabilised and proven useful in Genius and Netvirt).",
      "parentUuid": "7b8abfaa_6425c0ec",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd7da9ed_d8af3c71",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/DatastoreReadTransaction.java",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-06-20T14:19:10Z",
      "side": 1,
      "message": "OK, that make sense, but then let\u0027s see if perhaps we can find a name which somehow expresses a part of \"LogicalDatastoreType\" in the name?  To me, the \"Datastore\" is the entire DB; read as database, or databorker.  So this is a transaction specific to one of the two available TYPES of the datastore - so... LogicalTypedReadTransaction?  OK, that\u0027s ugly... :-(  I don\u0027t suppose we simply wanted to have 2 fixed types - an OperationalRead[/Write]Transaction and a ConfigurationRead[/Write]Transaction?  That would be really simple and clear, to me.  I understand it\u0027s less \"open\", and (generics) \"sexy\" - but it\u0027s not like there are ever going to be any other?  Just a wild thought.",
      "parentUuid": "bc2c6d62_2317d64a",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ade9c73b_fb7ff64c",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/DatastoreReadTransaction.java",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-06-20T14:27:56Z",
      "side": 1,
      "message": "how about a FluentFeature instead of a CheckedFuture here as well then?  For consistency with ManagedNewTransactionRunner... all these different async APIs are very confusing for most mere mortals - if we define new APIs here, then let\u0027s at least be consistent within them?",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73569ef9_2cb51a30",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/DatastoreReadTransaction.java",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 4540
      },
      "writtenOn": "2018-06-20T16:29:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ade9c73b_fb7ff64c",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "595e5303_a2c2efed",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/DatastoreWriteTransaction.java",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-06-19T17:03:20Z",
      "side": 1,
      "message": "why extends WriteTransaction?  I\u0027m not concinved that backward compability is that important here - why not use this as an opportunity to boldly go.. don\u0027t extend, no @Deprecated \"old\" methods (and no close/submit!), just the new signatures!  When used in Lambda, then the impact is minor (you don\u0027t see the type name).  And where we\u0027re passing around open TX objects, it will be trivial to replace WriteTransaction arguments by ManagedWriteTransaction - and that will give us the type safety we, IMHO, badly need here - no more stupid enforcement of the new paradigm only at runtime, instead of at compile time.  We didn\u0027t have the balls to do this with the first iteration of our ManagedNewTransactionRunner, and had the NonSubmitCancelableDatastoreWriteTransaction \u0026 Co. - but I think we should dare to go do it right in this 2nd round.",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90319f94_0bddbdbf",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/DatastoreWriteTransaction.java",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 4540
      },
      "writtenOn": "2018-06-20T07:38:57Z",
      "side": 1,
      "message": "We can’t switch in one go, because there are methods in Netvirt which pass transations to Genius methods.",
      "parentUuid": "595e5303_a2c2efed",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1af1ba2c_0e67f49f",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/DatastoreWriteTransaction.java",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 4540
      },
      "writtenOn": "2018-06-20T07:42:11Z",
      "side": 1,
      "message": "Oh and the whole point of using the new Datastore type *is* to enforce this at compile-time, in code which has been converted. I’m leaving the backwards-compatible shim in place so that we can convert code without needing to convert large swathes of code across both Netvirt and Genius in one go, but I deprecated the old methods so that they can easily be removed once that’s done.",
      "parentUuid": "595e5303_a2c2efed",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad86e71b_9703d58d",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/DatastoreWriteTransaction.java",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-06-20T14:19:10Z",
      "side": 1,
      "message": "But, as is, we are NOT getting the benefit to enforce this at compile-time!  Trust me, people WILL misuse this... do you want to bet on how many times we\u0027ll be chasing CSIT failures due to \"Invalid datastore %s used instead of %s\" IllegalArgumentException at run-time? ;-)  Those are, comparatively, *VERY* expensive VS catching the same at compile time.\n\nTherefore I feel fairly strongly about using this new round of transaction utility to get the new API pure and right and clean.  What we could do is to address things like \"methods in Netvirt which pass transations to Genius methods\" with a clearly separate temporary @Deprecated adapter, to make it easy to \"bridge\" to the existing world.",
      "parentUuid": "1af1ba2c_0e67f49f",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a8cc785_d2e78b68",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/DatastoreWriteTransaction.java",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 4540
      },
      "writtenOn": "2018-06-20T16:29:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ad86e71b_9703d58d",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4a831c8_d79b96f7",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/ManagedNewTransactionRunner.java",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-06-19T17:03:20Z",
      "side": 1,
      "message": "Just asking, not -1: should we really already use FluentFuture here?  It will confuse people who are used to ListenableFuture from DataBroker... use this now, or only when the \"main\" DataBroker changes to this new API?  (Is that happening soon?)",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1211741b_97b9b74b",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/ManagedNewTransactionRunner.java",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 4540
      },
      "writtenOn": "2018-06-20T07:38:57Z",
      "side": 1,
      "message": "DataBroker already has switched to the new API.",
      "parentUuid": "a4a831c8_d79b96f7",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17af1b5e_5a1abe86",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/ManagedNewTransactionRunner.java",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-06-20T14:27:56Z",
      "side": 1,
      "message": "Right, the new commit() is like this, whereas the old submit() was CheckedFuture; this isn\u0027t used much in application code, yet; but fine with me, as just seen on https://github.com/opendaylight/controller/blob/master/opendaylight/md-sal/sal-common-api/src/main/java/org/opendaylight/controller/md/sal/common/api/data/AsyncWriteTransaction.java",
      "parentUuid": "1211741b_97b9b74b",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba75a136_4bf62dd0",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/ManagedNewTransactionRunner.java",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-06-19T17:03:20Z",
      "side": 1,
      "message": "Re. CommitInfo ... will applications ever have *ANY* use for / interest in this?  Example? ;-)  My concern is just to keep this utility API simple so that people get it more easily, and use it without confusion / reluctance.",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3db9a48c_216de012",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/ManagedNewTransactionRunner.java",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 4540
      },
      "writtenOn": "2018-06-20T07:38:57Z",
      "side": 1,
      "message": "That’s the return type from the DataBroker. You make a good point about the API though, perhaps we should use Void instead here...",
      "parentUuid": "ba75a136_4bf62dd0",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf8cde13_47df6675",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/ManagedNewTransactionRunner.java",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-06-20T14:27:56Z",
      "side": 1,
      "message": "+1 (unless I\u0027m missing something which this CommitInfo provides which could have any value/interest for applications; but as far as I can tell, it looks purely \"inernal\").",
      "parentUuid": "3db9a48c_216de012",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aebd358a_df4d45a1",
        "filename": "mdsalutil/mdsalutil-api/src/main/java/org/opendaylight/genius/infra/ManagedNewTransactionRunner.java",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 4540
      },
      "writtenOn": "2018-06-20T16:56:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf8cde13_47df6675",
      "revId": "6706b0f720c46342dcf5d1ceeb18f99dfd87d4af",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}