{
  "comments": [
    {
      "key": {
        "uuid": "12b24660_f687eee9",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/renderer/ovs/utilities/SouthboundUtils.java",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-03-16T03:16:14Z",
      "side": 1,
      "message": "Don\u0027t need to store this.",
      "revId": "99590a0be5ae45f1b999870a454ae265c6b077a8",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "642e8452_d03d08ac",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/renderer/ovs/utilities/SouthboundUtils.java",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 3276
      },
      "writtenOn": "2018-03-16T04:06:28Z",
      "side": 1,
      "message": "will do.",
      "parentUuid": "12b24660_f687eee9",
      "revId": "99590a0be5ae45f1b999870a454ae265c6b077a8",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "514de20a_67705ea4",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/renderer/ovs/utilities/SouthboundUtils.java",
        "patchSetId": 2
      },
      "lineNbr": 141,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-03-16T03:16:14Z",
      "side": 1,
      "message": "What about using DataObjectCache? Otherwise entries don\u0027t get purged when an ovs node is removed.  hey might only be purged when MAX_CACHE_SIZE is reached. Perhaps this is OK.",
      "revId": "99590a0be5ae45f1b999870a454ae265c6b077a8",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "925bec36_1ef0388b",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/renderer/ovs/utilities/SouthboundUtils.java",
        "patchSetId": 2
      },
      "lineNbr": 141,
      "author": {
        "id": 3276
      },
      "writtenOn": "2018-03-16T04:06:28Z",
      "side": 1,
      "message": "Yes, it is okay in this case. That is why am using cache with bound size. Also, this is not really storing a DS object with identifier as a key, so not sure if DataObjectCache is a good fit for this.",
      "parentUuid": "514de20a_67705ea4",
      "revId": "99590a0be5ae45f1b999870a454ae265c6b077a8",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3a64410_c1190d33",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/renderer/ovs/utilities/SouthboundUtils.java",
        "patchSetId": 2
      },
      "lineNbr": 141,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-03-16T12:12:05Z",
      "side": 1,
      "message": "DataObjectCache has been extended to allow for custom key that can be extracted from the DS object. Plus it avoids a DS read, at least it should most of the time. So it seems like a good fit.",
      "parentUuid": "925bec36_1ef0388b",
      "revId": "99590a0be5ae45f1b999870a454ae265c6b077a8",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6150f4a_b42b4d64",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/renderer/ovs/utilities/SouthboundUtils.java",
        "patchSetId": 2
      },
      "lineNbr": 151,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-03-14T09:45:36Z",
      "side": 1,
      "message": "OMG, I had to sit down upon seeing this... really?  Whoa parteeeeeeeh! I\u0027ve just opened a bottle of champagne.",
      "revId": "99590a0be5ae45f1b999870a454ae265c6b077a8",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10197f6a_58beccaa",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/renderer/ovs/utilities/SouthboundUtils.java",
        "patchSetId": 2
      },
      "lineNbr": 151,
      "author": {
        "id": 3276
      },
      "writtenOn": "2018-03-15T03:03:37Z",
      "side": 1,
      "message": "Glad to make you happy. Wanted to do this the correct way and this was perfect for the use case here.",
      "parentUuid": "d6150f4a_b42b4d64",
      "revId": "99590a0be5ae45f1b999870a454ae265c6b077a8",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb0ede46_862ab82f",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/renderer/ovs/utilities/SouthboundUtils.java",
        "patchSetId": 2
      },
      "lineNbr": 158,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-03-14T09:45:36Z",
      "side": 1,
      "message": "FYI the statsEnabled(true) will theoretically have a very small performance overhead, according to Guice documentation.  But I suspect that in the overall scheme of things of everything we are doing in ODL it is absolutely irrelevant though, so I don\u0027t mind and will +1 not -1 because of this anyway.  Just so you know though, and as an FYI may be for future perhaps more performance critical code paths, my original idea wasn\u0027t that  one would enable stats via this in the code when setting up the Cache, but that one would do this via the CLI (via \"cache:policy ovsVersionCache statsEnabled true\") e.g. in lab tests, when needed.",
      "revId": "99590a0be5ae45f1b999870a454ae265c6b077a8",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e65aa147_d5b2c9c3",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/renderer/ovs/utilities/SouthboundUtils.java",
        "patchSetId": 2
      },
      "lineNbr": 158,
      "author": {
        "id": 3276
      },
      "writtenOn": "2018-03-15T03:03:37Z",
      "side": 1,
      "message": "Perfect, I had enabled it for my testing, if CLI is there that works out better. Removed it now.",
      "parentUuid": "eb0ede46_862ab82f",
      "revId": "99590a0be5ae45f1b999870a454ae265c6b077a8",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34eac902_06f71820",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/renderer/ovs/utilities/SouthboundUtils.java",
        "patchSetId": 2
      },
      "lineNbr": 367,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-03-16T03:16:14Z",
      "side": 1,
      "message": "You should log the exception. \n\nAlso ReadFailedException could mean that the read failed. In that case it throws ExpectedDataObjectNotFoundException. However I prefer syncReadOptional b/c throwing an exception is expensive and should really be for uncommon/unexpected failures. \n\nSo what should happen if the read actually fails? That means you don\u0027t know if the node exists and has a version so it seems returning and caching DEFAULT_OVS_VERSION doesn\u0027t seem right. I\u0027d think you\u0027d want to propagate the error to the caller. hat\u0027s the way DataObjectCache handles it (another plug for DataObjectCache :)).",
      "revId": "99590a0be5ae45f1b999870a454ae265c6b077a8",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a36a0c7_a1eda3c7",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/renderer/ovs/utilities/SouthboundUtils.java",
        "patchSetId": 2
      },
      "lineNbr": 367,
      "author": {
        "id": 3276
      },
      "writtenOn": "2018-03-16T04:06:28Z",
      "side": 1,
      "message": "Caller will be this code only and it will handle in a similar way even if I let it throw exception. This code will ONLY be called when device is connected, in which case it will either be already added to cache or present in datastore.\n\nDefault version is what we already assume today and document as minimum required to work with ODL/Netvirt. This just adds option to handle it, so exception means we go back to our assumptions already present in code.\n\nPrefer the idea of syncReadOptional as exception is not important, only if it exists or not.",
      "parentUuid": "34eac902_06f71820",
      "revId": "99590a0be5ae45f1b999870a454ae265c6b077a8",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e61760cf_ad2470ca",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/renderer/ovs/utilities/SouthboundUtils.java",
        "patchSetId": 2
      },
      "lineNbr": 367,
      "author": {
        "id": 3276
      },
      "writtenOn": "2018-03-16T04:21:05Z",
      "side": 1,
      "message": "Went with syncRead for now. I do like the idea of propogating exception to caller and handling it from there, but rest of DataObjectCache doesn\u0027t fit this use case. Maybe good to have exception thrown from cache\u0027s get method itself?",
      "parentUuid": "3a36a0c7_a1eda3c7",
      "revId": "99590a0be5ae45f1b999870a454ae265c6b077a8",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03512203_ef897eed",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/renderer/ovs/utilities/SouthboundUtils.java",
        "patchSetId": 2
      },
      "lineNbr": 367,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-03-16T12:12:05Z",
      "side": 1,
      "message": "yes - that is what DataObjectCache does. As I mentioned, I think DataObjectCache is a good fit here. \n\nBTW - you should rarely, if ever, catch an exception and log a message but not log the exception. In fact I think the findbugs slf4j plugin might flag this.",
      "parentUuid": "e61760cf_ad2470ca",
      "revId": "99590a0be5ae45f1b999870a454ae265c6b077a8",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3cb59caf_c3c88808",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/renderer/ovs/utilities/SouthboundUtils.java",
        "patchSetId": 2
      },
      "lineNbr": 367,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-03-16T12:12:05Z",
      "side": 1,
      "message": "\u003e Caller will be this code only and it will handle in a similar way\n \u003e even if I let it throw exception. This code will ONLY be called\n \u003e when device is connected, in which case it will either be already\n \u003e added to cache or present in datastore.\n \u003e \n\nIf this code is only called when a device is connected, that normally occurs once, correct? If os, what\u0027s the point in caching?\n\n \u003e \n \u003e Prefer the idea of syncReadOptional as exception is not important,\n \u003e only if it exists or not.\n\nIt\u0027s for efficiency - throwing an exception is very costly and should not be used on an expected code path (non-existent data falls into this criteria which is why DS read returns Optional and doesn\u0027t throw an exception).  IMO, for these reasons, syncRead should not exist. Also ExpectedDataObjectNotFoundException should not derive from ReadFailedException as it is intended for an actual failure where it could not be determined if the object exists or not.",
      "parentUuid": "3a36a0c7_a1eda3c7",
      "revId": "99590a0be5ae45f1b999870a454ae265c6b077a8",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}