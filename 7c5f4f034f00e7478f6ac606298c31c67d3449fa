{
  "comments": [
    {
      "key": {
        "uuid": "fafc7978_02479620",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/InterfacemgrProvider.java",
        "patchSetId": 25
      },
      "lineNbr": 591,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-01-30T07:05:03Z",
      "side": 1,
      "message": "This will major impact on the performance while dealing with 200DPNs/15 VMs per DPN. \nAt least search logic in getNodeByTerminationPointExternalId/getTerminationPointByExternalId should get parallelized with parallel stream of nodes/termination points. But still not sure how much will it improve. We have to measure it and shouldn\u0027t have any degradation in current scaling/performance, then we can get this in.",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_42f51e82",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/InterfacemgrProvider.java",
        "patchSetId": 25
      },
      "lineNbr": 591,
      "author": {
        "id": 670
      },
      "writtenOn": "2017-01-30T09:33:42Z",
      "side": 1,
      "message": "Vishal promised to optimize this with a Genius cache since currently we are missing infrastructure for this. This is Carbon code, it won\u0027t go into Boron without a cache.\n\nVishal do you want to comment on this? (again? ;)",
      "parentUuid": "fafc7978_02479620",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_e25ed2e8",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/InterfacemgrProvider.java",
        "patchSetId": 25
      },
      "lineNbr": 606,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-01-30T07:05:03Z",
      "side": 1,
      "message": "what if interface state is not yet populated for ovsdbTp ? Because it happens via FlowCapableNodeConnector DCNs.",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_c2090e97",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/InterfacemgrProvider.java",
        "patchSetId": 25
      },
      "lineNbr": 606,
      "author": {
        "id": 670
      },
      "writtenOn": "2017-01-30T09:33:42Z",
      "side": 1,
      "message": "There is no need for the interface-state to actually exist when populating the parentRef (as it is today where the parentRef may be populated before the interface-state exists). Note getPortNameForInterfaceDS does not require any DS info.",
      "parentUuid": "fafc7978_e25ed2e8",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_223c5ae2",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/InterfacemgrProvider.java",
        "patchSetId": 25
      },
      "lineNbr": 606,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-01-30T10:18:10Z",
      "side": 1,
      "message": "Yes Alon, My Bad. It doesn\u0027t read from interface-state ds.",
      "parentUuid": "fafc7978_c2090e97",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_3dc75f47",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/InterfacemgrProvider.java",
        "patchSetId": 25
      },
      "lineNbr": 606,
      "author": {
        "id": 670
      },
      "writtenOn": "2017-01-30T11:32:40Z",
      "side": 1,
      "message": "np - renamed without the DS now to prevent this confusion :)",
      "parentUuid": "fafc7978_223c5ae2",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_c263ceaf",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/InterfacemgrProvider.java",
        "patchSetId": 25
      },
      "lineNbr": 623,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-01-30T07:05:03Z",
      "side": 1,
      "message": "shouldn\u0027t this run on node which is eos owner for IFACE_ENTITY ?",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_22ff3a69",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/InterfacemgrProvider.java",
        "patchSetId": 25
      },
      "lineNbr": 623,
      "author": {
        "id": 670
      },
      "writtenOn": "2017-01-30T09:33:42Z",
      "side": 1,
      "message": "it does, see the callers for updateInterfaceParentRef",
      "parentUuid": "fafc7978_c263ceaf",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_6225c2c1",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/InterfacemgrProvider.java",
        "patchSetId": 25
      },
      "lineNbr": 623,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-01-30T10:18:10Z",
      "side": 1,
      "message": "okay, but this is being exposed as API. so Let us run this task in iface_entity owner node which makes caller not to worry about it.\nAlso, what about updating interface-parent-entry in interface-child-info container ? I don\u0027t see its is getting updated.",
      "parentUuid": "fafc7978_22ff3a69",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_1d0d3b91",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/InterfacemgrProvider.java",
        "patchSetId": 25
      },
      "lineNbr": 623,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-01-30T12:16:47Z",
      "side": 1,
      "message": "I hope you address this as well.",
      "parentUuid": "fafc7978_6225c2c1",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_6b2f5aa2",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/InterfacemgrProvider.java",
        "patchSetId": 25
      },
      "lineNbr": 623,
      "author": {
        "id": 670
      },
      "writtenOn": "2017-01-31T10:13:13Z",
      "side": 1,
      "message": "I can move the runOnlyInLeaderNode() into this updateInterfaceParentRef function.\nHowever, there is additional logic in the callers, leading to this call, that we want to do only in the EOS owner.\n\nDoes it work ok to have a runOnlyInLeaderNode nested in another runOnlyInLeaderNode? Meaning only add runOnlyInLeaderNode here but keep the others in the calling functions?\nI like the fact that most of the current code declares running only in leader node right after the notification.",
      "parentUuid": "fafc7978_1d0d3b91",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_fc65cf45",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/InterfacemgrProvider.java",
        "patchSetId": 25
      },
      "lineNbr": 623,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-02-01T04:17:34Z",
      "side": 1,
      "message": "Okay, At least add the comment that this API should get invoked from the tasks running in iface Leader Node.",
      "parentUuid": "fafc7978_6b2f5aa2",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_5d3a23ce",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/commons/InterfaceManagerCommonUtils.java",
        "patchSetId": 25
      },
      "lineNbr": 586,
      "author": {
        "id": 817
      },
      "writtenOn": "2017-01-30T10:10:21Z",
      "side": 1,
      "message": "these APIs are not using DS read, so can we remove it from the method name",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_dd4d7374",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/InterfaceConfigListener.java",
        "patchSetId": 25
      },
      "lineNbr": 125,
      "author": {
        "id": 817
      },
      "writtenOn": "2017-01-30T10:10:21Z",
      "side": 1,
      "message": "this will trigger one more updateDCN which will anyways internally do an add... and the below code is doing one more add job queuing unnecessarily...do we need both?",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_48109f4e",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/InterfaceConfigListener.java",
        "patchSetId": 25
      },
      "lineNbr": 125,
      "author": {
        "id": 670
      },
      "writtenOn": "2017-01-30T12:40:30Z",
      "side": 1,
      "message": "How do you propose to handle this?\nIf we get a neutron port add:\n1. it will add an interface WITHOUT parentRef (to prevent races)\n2. InterfaceConfigListener will wake up, see there is no parentRef and fill it in\n3. InterfaceConfigListener will wake up, see there is a parentRef and do nothing in this regard.\n\nWe did 1+2 to prevent the races between southbound/northbound that we discussed, and I don\u0027t see how to avoid (3) this way..\n\nI still have an open question for you on what is the rest of the functionality done here in add (RendererConfigUpdateWorker) - it is written oddly. It should probably have similar \"ignore if no update\" logic? WDYT?",
      "parentUuid": "fafc7978_dd4d7374",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_2259fafe",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/InterfaceInventoryStateListener.java",
        "patchSetId": 25
      },
      "lineNbr": 107,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-01-30T07:05:03Z",
      "side": 1,
      "message": "what if FlowCapableNodeConnector DCN is received followed by TerminationPoint DCN\u0027s ? In that case we miss out handling child interfaces of OF port.",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_e22b72e9",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/InterfaceInventoryStateListener.java",
        "patchSetId": 25
      },
      "lineNbr": 107,
      "author": {
        "id": 670
      },
      "writtenOn": "2017-01-30T09:33:42Z",
      "side": 1,
      "message": "Again, this method does not require any additional info, what do you mean?",
      "parentUuid": "fafc7978_2259fafe",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_5dafc3e3",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/InterfaceInventoryStateListener.java",
        "patchSetId": 25
      },
      "lineNbr": 107,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-01-30T10:18:10Z",
      "side": 1,
      "message": "I meant we need to handle a race condition here. i.e. This add can be called even before TerminationPointStateListener#add (ovsdb vs OF). so we may not have parentRef for VM interface and interface-parent-entry not present in interface-child-info container.",
      "parentUuid": "fafc7978_e22b72e9",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_fdb5d7cd",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/InterfaceInventoryStateListener.java",
        "patchSetId": 25
      },
      "lineNbr": 107,
      "author": {
        "id": 670
      },
      "writtenOn": "2017-01-30T11:32:40Z",
      "side": 1,
      "message": "mm this is a good point, I missed this usage of getInterfaceParentEntryFromConfigDS in getInterfaceChildEntries()\n\nCould you explain the logic? I wasn\u0027t aware of the interface-child-info model - does this point from interface-state to child interface-states?\nWhat are the dependencies here?",
      "parentUuid": "fafc7978_5dafc3e3",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_3d3c7f2f",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/InterfaceInventoryStateListener.java",
        "patchSetId": 25
      },
      "lineNbr": 107,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-01-30T12:16:47Z",
      "side": 1,
      "message": "From fcNodeConnectorNew, we may not able to retrieve VM interface name to populate parentRef and interface-parent-entry. So I think it is better to (timed)await with timeout 0 on a java synchronizer (may be CountDownLatch with count 1) till parentRef is populated. If latch.await returns false, then we can move it to a queue for later processing through singlethreadpoolexecutor (to maintain DCN notification order).\nOnce InterfaceConfigListener or TerminationPointStateListener populates parentRef and interface-parent-entry, it can do countdown, so that tasks related to interfaceinventorystatelistener can proceed. \nThis needs a concurrenthash map maintaining latch against interface-name key, these logic should get executed in interfaces eos owner node.",
      "parentUuid": "fafc7978_fdb5d7cd",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_6b58fa56",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/InterfaceInventoryStateListener.java",
        "patchSetId": 25
      },
      "lineNbr": 107,
      "author": {
        "id": 670
      },
      "writtenOn": "2017-01-31T10:13:13Z",
      "side": 1,
      "message": "I am not in favor of adding waits if possible to avoid.\n\nCould you please explain the logic of interface-child-info model, and what kind of id references does it contain?\n\nAlso could you please explain \"we may not be able to retrieve VM interface name\"? What do you mean by this? Do you mean the fcNodeConnector.getName() could be null? That shouldn\u0027t happen as I understand it.",
      "parentUuid": "fafc7978_3d3c7f2f",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_9c6da335",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/InterfaceInventoryStateListener.java",
        "patchSetId": 25
      },
      "lineNbr": 107,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-02-01T04:17:34Z",
      "side": 1,
      "message": "fcNodeConnector.getName() gives us only vhu(tap) port name on which VM is attached. As part of this add DCN, we retrieve its child interfaces (i.e. VLAN trunk interface of VM) through getInterfaceChildEntries and process it (to populate interface-state ds, programming table 0 etc.).\n\nDue to race condition, as mentioned earlier interface-child-info may not get populated and we end up in not processing vlan trunk interface.\n\nThere is no way to retrieve VLAN trunk interface name from portName unless we look up on neutron port model or southboundutils. That is the reason i have proposed wait-unit-available approach.",
      "parentUuid": "fafc7978_6b58fa56",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_9cbbd80d",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/InterfaceInventoryStateListener.java",
        "patchSetId": 25
      },
      "lineNbr": 107,
      "author": {
        "id": 3276
      },
      "writtenOn": "2017-02-02T14:34:49Z",
      "side": 1,
      "message": "Peri, as part of new trunk port API, we will have to handle this scenario. For trunk ports subports will be added later so we need to handle possibility of child information coming in after OfPorts. We can address it as part of trunk changes and/or subsequent patches/fixes.",
      "parentUuid": "fafc7978_9c6da335",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_8d4ba0af",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/InterfaceInventoryStateListener.java",
        "patchSetId": 25
      },
      "lineNbr": 107,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-02-03T06:17:48Z",
      "side": 1,
      "message": "This is generic race condition that can occur b/w OF and OVSDB southbound events which leads to VM interfaces not getting processed. I have already talked to Alon and he mentioned he will address it.\n\nI suggest not to check-in this code unless theses comments are addressed (also improving southboundUtils.getNodeByTerminationPointExternalId(interfaceName) or having local cache in genius).\n\nSince we already have EVPN, ECMP features coming in to ODL/master, this should not block the testing.",
      "parentUuid": "fafc7978_9cbbd80d",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_6d891cca",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/InterfaceInventoryStateListener.java",
        "patchSetId": 25
      },
      "lineNbr": 107,
      "author": {
        "id": 817
      },
      "writtenOn": "2017-02-03T06:33:13Z",
      "side": 1,
      "message": "Peri I have a doubt here...if this event comes first, we will just add tapPort interface-state and return.. whenever OVSDB event comes, Alon is anyways doing updateParentRef().. This will do add of trunk interface and trunk-member interfaces as part of the update listener..won\u0027t that help?",
      "parentUuid": "fafc7978_8d4ba0af",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_8848ae5c",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/InterfaceInventoryStateListener.java",
        "patchSetId": 25
      },
      "lineNbr": 107,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-02-03T07:27:41Z",
      "side": 1,
      "message": "Yes Faseela, If InterfaceConfigListener#update does it properly, then we are good. But InterfacemgrProvider#updateInterfaceParentRef should be using parentInterfaceName as the djc job key. but it\u0027s currently using \"PORT- \" + interfaceName.",
      "parentUuid": "fafc7978_6d891cca",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_decc2d64",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/InterfaceInventoryStateListener.java",
        "patchSetId": 25
      },
      "lineNbr": 107,
      "author": {
        "id": 670
      },
      "writtenOn": "2017-02-04T10:38:50Z",
      "side": 1,
      "message": "This was the original DJC key.. Faseela asked to sync it with the neutron one, I agree the parentInterfaceName is more fitting, though it shouldn\u0027t matter since the important part is both using the same key (which is handled by calling the same updateParentRef method.\nI think the current handling of InterfaceConfigListener#update handles it ok.",
      "parentUuid": "fafc7978_8848ae5c",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_9e02a56d",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/InterfaceInventoryStateListener.java",
        "patchSetId": 25
      },
      "lineNbr": 107,
      "author": {
        "id": 817
      },
      "writtenOn": "2017-02-04T11:21:34Z",
      "side": 1,
      "message": "Peri, this key is for writing to interface config DS,which is done by neutron vpn..currently add is done by neutronvpn and update by interface-manager..thats why this is aligned to neutronvpn key..after the write, interface config DCN has anyways keyed on parent-interface",
      "parentUuid": "fafc7978_decc2d64",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_6272e27d",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/TerminationPointStateListener.java",
        "patchSetId": 25
      },
      "lineNbr": 96,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-01-30T07:05:03Z",
      "side": 1,
      "message": "parentRefName can be null.",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_8246e6bd",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/TerminationPointStateListener.java",
        "patchSetId": 25
      },
      "lineNbr": 96,
      "author": {
        "id": 670
      },
      "writtenOn": "2017-01-30T09:33:42Z",
      "side": 1,
      "message": "Are you saying tpName.getName() can be null? I haven\u0027t seen such TPs.. in any case what would be the issue with updating a null parentRefName? If the tp has no name, but is pointing to the neutron port - we still have nowhere to point to.",
      "parentUuid": "fafc7978_6272e27d",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_bdeeaf20",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/TerminationPointStateListener.java",
        "patchSetId": 25
      },
      "lineNbr": 96,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-01-30T10:18:10Z",
      "side": 1,
      "message": "ignore it. I thought it was an interface-state ds read.",
      "parentUuid": "fafc7978_8246e6bd",
      "revId": "7c5f4f034f00e7478f6ac606298c31c67d3449fa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}