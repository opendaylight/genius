{
  "comments": [
    {
      "key": {
        "uuid": "da01753e_4c2a412d",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 13,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-20T05:51:51Z",
      "side": 1,
      "message": "is there any specific requirement which needs this to get implemented ? Please elaborate.",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_4e006b67",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 13,
      "author": {
        "id": 6947
      },
      "writtenOn": "2017-04-20T09:08:07Z",
      "side": 1,
      "message": "we chose to manage DHCP server allocation pools with id-manager. For DHCP - specific allocations are required for specific requests or manual allocations",
      "parentUuid": "da01753e_4c2a412d",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_6baba1d6",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 45,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-20T05:51:51Z",
      "side": 1,
      "message": "why can\u0027t we simply move expired ids into released ids ?\nAnd add expiry-time property in delayed-id-entry so that it can be used again when this id is allocated again.",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_8ec53390",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 45,
      "author": {
        "id": 6947
      },
      "writtenOn": "2017-04-20T09:08:07Z",
      "side": 1,
      "message": "the intention is to check if id has expired, or look for an expired id - on demand, instead of constantly checking for expired id\u0027s and releasing them (assuming ids are usually released or renewed). If we want to constantly scan, then its another valid iplementation that can be re-considered..\n\nregarding delayed-id-entry, for the current implementation - I can indeed extend it and use it in allocated-ids instead of defining the \"allocated-id-entry\" (ready-time-sec will be the expiry-time and id-key will be added as optional).",
      "parentUuid": "da01753e_6baba1d6",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_272265a4",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 45,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-21T07:12:39Z",
      "side": 1,
      "message": "We could even don\u0027t need to use delayed-id-entry. id-entries itself can have another field expired-time and if both released-id-holder/available-id-holder doesn\u0027t have id to allocate, we could look for expired id entry in id-entries for allocation. This way we could completely avoid moving expired ids from id-entries to released ids by constant scan.\nThis can allow to remove enhanced-id-allocation flag in createIdPool and allocated-ids-holder completely.\n\nWDYT ?",
      "parentUuid": "da01753e_8ec53390",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_d696a8ef",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 45,
      "author": {
        "id": 6947
      },
      "writtenOn": "2017-04-23T10:32:07Z",
      "side": 1,
      "message": "the main reason for the allocated-ids-holder is to have cache with a list of all allocated ids, mapped by id, in order to easily check if a specific id is available. If I already have that mapped list, I thought using it for expiration as well, while not touching id-entries and the way they are stored in db.",
      "parentUuid": "da01753e_272265a4",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_f9b47dd2",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 45,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-24T05:52:09Z",
      "side": 1,
      "message": "I hope you store allocated id entries in allocated-ids-holder when specific id is requested for id-key (or) id is requested with expiration time. All other allocated id entries (i.e. id requested with only id-key) are stored in id-entries. \n\nSo we make id-entries as local cache too (right now it stored in db for parent pool and extend it with local cache) and get it updated for every id allocation. \nThis way we could avoid two lookups on both id-entries and allocated-ids-holder for the id existence for the specific id request.\n\nOr Do you plan to to use only allocated-ids-holder when enhanced-id-allocation is set for a id-pool ? By the way is it okay to have this flag because there could be some more enhancements can come in for id manager, then we would end up in adding few more flags in id pool to differentiate b/w id pools.",
      "parentUuid": "da01753e_d696a8ef",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_abbaa907",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 82,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-20T05:51:51Z",
      "side": 1,
      "message": "is the id-value is within the id range of its pool ? Or do we even allow id which is out of range ?\n\nThe user requested id-value could be even present in available-id-holder, released-id-holder of parent/child pools. Are we considering this too ?",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_8ecff37e",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 82,
      "author": {
        "id": 6947
      },
      "writtenOn": "2017-04-20T09:08:07Z",
      "side": 1,
      "message": "id should be in range - I will add a verification for that in Workflow -\u003e Specific id allocation -\u003e Id doesn\u0027t exist\n\nin the same place (Workflow -\u003e Specific id allocation -\u003e Id doesn\u0027t exist), I am talking about the possible inconsistency with available-id-holder and released-id-holder.",
      "parentUuid": "da01753e_abbaa907",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_67146d44",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 82,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-21T07:12:39Z",
      "side": 1,
      "message": "Ok, but child pool (id\u0027s with block size) is created per cluster node. so when a node is requesting for a id which is already part of other node child pool, we need to make sure it is borrowed from that child pool. we may need to use IdPoolListener so that corresponding child pool can be updated.",
      "parentUuid": "da01753e_8ecff37e",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_36ac5435",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 82,
      "author": {
        "id": 6947
      },
      "writtenOn": "2017-04-23T10:32:07Z",
      "side": 1,
      "message": "I Didn\u0027t think about it :)\n\nI thought about 2 directions:\n1. verfiy that the requested id is in range according to the parent pool. If id is in range, I can scan the child pools for the range that contains the requested id - if I find it, I can forward the allocation to the relevant odl with routed RPC, but if I don\u0027t find it, that\u0027s a problem. It could be caused because no one asked for that block yet, or that block was already exhausted and a new block took its place. Unused block is a problem I don\u0027t know how to solve.. but to keep track on all exhausted blocks of a certain child pool - I can add it to the allocated-ids-holder. WDYT? Any suggestion about the Unused block problem?\n2. maintain the allocated-ids-holder on the parent pool instead of on every child pool. That way each odl can check if id is used and allocate if possible, and due to the fact I am double checking allocation of a released/ available id, it is safe. The problem is - if different odls get a request with the same id at the same time - how do we make sure this id is not allocated twice? any other down sides?\n3. other suggestions? :)",
      "parentUuid": "da01753e_67146d44",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_39cd655e",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 82,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-24T05:52:09Z",
      "side": 1,
      "message": "I hope we should use both.\n\nThere are chances the requested id can be part of other child pool (or) part of unused block in the parent pool. \nFor #1, How do you make routed RPC? Because we don\u0027t maintain node ip properly as part of the child pool (or do you plan to retrieve it from child pool name ?). I think we can simply use child pools db to allocate id and update its local cache using DCN listener (example: IdPoolListener).\nFor#2, When requested id is in unused parent pool id block, Let id manager allocate this id, but id block (containing this allocated id) is assigned to a child pool, id manager has to make this id is not allocated to some other id-key.\n\nYes, we should make allocated-ids-holder on the parent pool instead of child pool. This will be ODL cluster nodes can easily check on the id existence.\n\nFor the issue, you have mentioned (if different odls get a request with the same id at the same time - how do we make sure this id is not allocated twice). We have addressed similar kind of issue using lockmanager for multiple nodes requesting id for same key at same time in https://git.opendaylight.org/gerrit/#/c/53461. The same way we may have to synchronize on id value.",
      "parentUuid": "da01753e_36ac5435",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_cb560dd2",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 90,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-20T05:51:51Z",
      "side": 1,
      "message": "If the given id-value is already allocated for some other id-key, should we assign some other id-value ?",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_4ead0b9c",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 90,
      "author": {
        "id": 6947
      },
      "writtenOn": "2017-04-20T09:08:07Z",
      "side": 1,
      "message": "if requested id is not available - a new id will be allocated dynamically (this is on the client-side to determine if he is pleased or not with the result)",
      "parentUuid": "da01753e_cb560dd2",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_470fa92e",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 90,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-21T07:12:39Z",
      "side": 1,
      "message": "Ok.",
      "parentUuid": "da01753e_4ead0b9c",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_2b2b5931",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 127,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-20T05:51:51Z",
      "side": 1,
      "message": "we could simply use existing id-entries to store all the allocated id\u0027s and add expiry time to it. There could be background scheduling thread which can drain out expired id entries into released id pool.",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_ae72b746",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 127,
      "author": {
        "id": 6947
      },
      "writtenOn": "2017-04-20T09:08:07Z",
      "side": 1,
      "message": "as discussed above, this is indeed another way to implement it",
      "parentUuid": "da01753e_2b2b5931",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_8b21a54f",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 226,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-20T05:51:51Z",
      "side": 1,
      "message": "Nit: remove trailing space.",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_2e9ec756",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 226,
      "author": {
        "id": 6947
      },
      "writtenOn": "2017-04-20T09:08:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "da01753e_8b21a54f",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}