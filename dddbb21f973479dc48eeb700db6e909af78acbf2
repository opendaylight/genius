{
  "comments": [
    {
      "key": {
        "uuid": "da01753e_4c2a412d",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 13,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-20T05:51:51Z",
      "side": 1,
      "message": "is there any specific requirement which needs this to get implemented ? Please elaborate.",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_4e006b67",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 13,
      "author": {
        "id": 6947
      },
      "writtenOn": "2017-04-20T09:08:07Z",
      "side": 1,
      "message": "we chose to manage DHCP server allocation pools with id-manager. For DHCP - specific allocations are required for specific requests or manual allocations",
      "parentUuid": "da01753e_4c2a412d",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_6baba1d6",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 45,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-20T05:51:51Z",
      "side": 1,
      "message": "why can\u0027t we simply move expired ids into released ids ?\nAnd add expiry-time property in delayed-id-entry so that it can be used again when this id is allocated again.",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_8ec53390",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 45,
      "author": {
        "id": 6947
      },
      "writtenOn": "2017-04-20T09:08:07Z",
      "side": 1,
      "message": "the intention is to check if id has expired, or look for an expired id - on demand, instead of constantly checking for expired id\u0027s and releasing them (assuming ids are usually released or renewed). If we want to constantly scan, then its another valid iplementation that can be re-considered..\n\nregarding delayed-id-entry, for the current implementation - I can indeed extend it and use it in allocated-ids instead of defining the \"allocated-id-entry\" (ready-time-sec will be the expiry-time and id-key will be added as optional).",
      "parentUuid": "da01753e_6baba1d6",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_272265a4",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 45,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-21T07:12:39Z",
      "side": 1,
      "message": "We could even don\u0027t need to use delayed-id-entry. id-entries itself can have another field expired-time and if both released-id-holder/available-id-holder doesn\u0027t have id to allocate, we could look for expired id entry in id-entries for allocation. This way we could completely avoid moving expired ids from id-entries to released ids by constant scan.\nThis can allow to remove enhanced-id-allocation flag in createIdPool and allocated-ids-holder completely.\n\nWDYT ?",
      "parentUuid": "da01753e_8ec53390",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_abbaa907",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 82,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-20T05:51:51Z",
      "side": 1,
      "message": "is the id-value is within the id range of its pool ? Or do we even allow id which is out of range ?\n\nThe user requested id-value could be even present in available-id-holder, released-id-holder of parent/child pools. Are we considering this too ?",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_8ecff37e",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 82,
      "author": {
        "id": 6947
      },
      "writtenOn": "2017-04-20T09:08:07Z",
      "side": 1,
      "message": "id should be in range - I will add a verification for that in Workflow -\u003e Specific id allocation -\u003e Id doesn\u0027t exist\n\nin the same place (Workflow -\u003e Specific id allocation -\u003e Id doesn\u0027t exist), I am talking about the possible inconsistency with available-id-holder and released-id-holder.",
      "parentUuid": "da01753e_abbaa907",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_67146d44",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 82,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-21T07:12:39Z",
      "side": 1,
      "message": "Ok, but child pool (id\u0027s with block size) is created per cluster node. so when a node is requesting for a id which is already part of other node child pool, we need to make sure it is borrowed from that child pool. we may need to use IdPoolListener so that corresponding child pool can be updated.",
      "parentUuid": "da01753e_8ecff37e",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_cb560dd2",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 90,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-20T05:51:51Z",
      "side": 1,
      "message": "If the given id-value is already allocated for some other id-key, should we assign some other id-value ?",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_4ead0b9c",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 90,
      "author": {
        "id": 6947
      },
      "writtenOn": "2017-04-20T09:08:07Z",
      "side": 1,
      "message": "if requested id is not available - a new id will be allocated dynamically (this is on the client-side to determine if he is pleased or not with the result)",
      "parentUuid": "da01753e_cb560dd2",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_470fa92e",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 90,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-21T07:12:39Z",
      "side": 1,
      "message": "Ok.",
      "parentUuid": "da01753e_4ead0b9c",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_2b2b5931",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 127,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-20T05:51:51Z",
      "side": 1,
      "message": "we could simply use existing id-entries to store all the allocated id\u0027s and add expiry time to it. There could be background scheduling thread which can drain out expired id entries into released id pool.",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_ae72b746",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 127,
      "author": {
        "id": 6947
      },
      "writtenOn": "2017-04-20T09:08:07Z",
      "side": 1,
      "message": "as discussed above, this is indeed another way to implement it",
      "parentUuid": "da01753e_2b2b5931",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_8b21a54f",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 226,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-04-20T05:51:51Z",
      "side": 1,
      "message": "Nit: remove trailing space.",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da01753e_2e9ec756",
        "filename": "docs/specs/enhanced-id-allocation.rst",
        "patchSetId": 10
      },
      "lineNbr": 226,
      "author": {
        "id": 6947
      },
      "writtenOn": "2017-04-20T09:08:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "da01753e_8b21a54f",
      "revId": "dddbb21f973479dc48eeb700db6e909af78acbf2",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}