{
  "comments": [
    {
      "key": {
        "uuid": "fafc7978_0e778a3b",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/InterfacemgrProvider.java",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-02-10T00:02:46Z",
      "side": 1,
      "message": "minor, but you would typically put Map instead of ConcurrentHashMap here, and then you would use \u003d new ConcurrentHashMap\u003c\u003e(), like you have.  And thanks for not making this static! ;)",
      "revId": "1b91567dc4ca145e0171aa556b9b17eb7191da01",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_89b534f0",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/InterfacemgrProvider.java",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-02-10T05:55:35Z",
      "side": 1,
      "message": "Nit: Also make it as final.",
      "parentUuid": "fafc7978_0e778a3b",
      "revId": "1b91567dc4ca145e0171aa556b9b17eb7191da01",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_c9d1fcfc",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/InterfacemgrProvider.java",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 3276
      },
      "writtenOn": "2017-02-10T06:14:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fafc7978_89b534f0",
      "revId": "1b91567dc4ca145e0171aa556b9b17eb7191da01",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_09c94478",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/InterfacemgrProvider.java",
        "patchSetId": 1
      },
      "lineNbr": 594,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-02-10T05:55:35Z",
      "side": 1,
      "message": "You could have methods like getNode(interfaceName), getTerminationPoint(interfaceName). In those methods, lookup local cache for the data (and if it not available then you can use southboundutils) and return it.",
      "revId": "1b91567dc4ca145e0171aa556b9b17eb7191da01",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_29088890",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/InterfacemgrProvider.java",
        "patchSetId": 1
      },
      "lineNbr": 594,
      "author": {
        "id": 3276
      },
      "writtenOn": "2017-02-10T06:14:51Z",
      "side": 1,
      "message": "yeah, plan is to do that. First I wanted to put this up to mak sure design wise all is covered. I didn\u0027t want to put too much effort into a cache implementation that will need rework once Michael\u0027s code in Infrautils is available. When it comes in these may move to different class et al. So aim was to do enough to eliminate reads.\n\nQuestion: Do we really need to do a read if not in cache? If it is not available yet it will be handled once it comes in. Missing in cache will most of times means not available yet.",
      "parentUuid": "fafc7978_09c94478",
      "revId": "1b91567dc4ca145e0171aa556b9b17eb7191da01",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_4e907243",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/InterfacemgrProvider.java",
        "patchSetId": 1
      },
      "lineNbr": 595,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-02-10T00:02:46Z",
      "side": 1,
      "message": "the problem with reading the cache here that you populated in the other class is that it\u0027s not \"encapsulated\" - you\u0027re not sure if and when the cache was populated, and anyone could mess with it .. but AFAIK this is how it\u0027s done elsewhere in ODL as well, so I\u0027m not going to -1 it because of this... ;-) FYI the Cache API I\u0027m working on in infrautils will kind of \"force\" you to have a single entry CacheFunction, and that will avoid this kind of problem.",
      "revId": "1b91567dc4ca145e0171aa556b9b17eb7191da01",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_89fff466",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/InterfacemgrProvider.java",
        "patchSetId": 1
      },
      "lineNbr": 595,
      "author": {
        "id": 3276
      },
      "writtenOn": "2017-02-10T06:14:51Z",
      "side": 1,
      "message": "Yep, I will move to single entry CacheFunction when your API comes in. For now aim is to do enough to eliminate reads and test the code. Don\u0027t want to put much effort into throwaway code that will not even make it to M4 [hopefully]",
      "parentUuid": "fafc7978_4e907243",
      "revId": "1b91567dc4ca145e0171aa556b9b17eb7191da01",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_8e9a5a61",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/TerminationPointStateListener.java",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 5867
      },
      "writtenOn": "2017-02-10T00:02:46Z",
      "side": 1,
      "message": "see comment in other class. Also, and perhaps most importantly, do you not need to remove/invalidate/evict what you cache here, ever?  (I don\u0027t know enough about the functional use case to judge, so just asking.)",
      "revId": "1b91567dc4ca145e0171aa556b9b17eb7191da01",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_69029070",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/TerminationPointStateListener.java",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 3276
      },
      "writtenOn": "2017-02-10T06:14:51Z",
      "side": 1,
      "message": "Eviction/removal of entries happens in remove code above.",
      "parentUuid": "fafc7978_8e9a5a61",
      "revId": "1b91567dc4ca145e0171aa556b9b17eb7191da01",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_298c0835",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/TerminationPointStateListener.java",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 5278
      },
      "writtenOn": "2017-02-10T05:55:35Z",
      "side": 1,
      "message": "this check is not required. because there is dpnId !\u003d null at line no 108.",
      "revId": "1b91567dc4ca145e0171aa556b9b17eb7191da01",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_c9f8dc7e",
        "filename": "interfacemanager/interfacemanager-impl/src/main/java/org/opendaylight/genius/interfacemanager/listeners/TerminationPointStateListener.java",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 3276
      },
      "writtenOn": "2017-02-10T06:14:51Z",
      "side": 1,
      "message": "yeah, leftover code from refactoring. fixed locally already.",
      "parentUuid": "fafc7978_298c0835",
      "revId": "1b91567dc4ca145e0171aa556b9b17eb7191da01",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}